<#@ template debug="true" hostspecific="false" inherits="TemplateBase" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
DECLARE @jsonRows NVARCHAR(MAX);
 
	BEGIN TRY
		BEGIN TRANSACTION
			UPDATE [<#= vwProjection.DbObject_Schema #>].[<#= vwProjection.DbObject_Name #>]
			SET 
			  [ModifiedBy_FK] = @userId
			,[Modified] = getdate()
<# 
			PushIndent("			");
			foreach(var col in columns){
				WriteUpdateColumn(col);
			}
			PopIndent();
#>

			FROM OPENJSON(@json)
				WITH (
<#
			PushIndent("			");
			bool first = true;
			foreach(var col in columns){
				WriteJsonColumn(col, first);
				first = false;
			}
			PopIndent();
#>					
				) AS json
			<#				
				WriteUpdateFilter();
				WriteGrids(); #>
				
			<# 	if (vwProjection.Object_ParticipantEnabled)
			{#>
			DECLARE @jsonParticipants NVARCHAR(MAX) = JSON_QUERY(@json, '$.Participants')
			IF (ISJSON(@jsonParticipants) > 0)  
				exec sp_api3_UpdateDbObjectParticipants @jsonParticipants, <#= vwProjection.DbObject_Id #>, @userId, @id
			<# } #>

			<#if (vwProjection.Object_DocumentEnabled)
			{#>
			DECLARE @jsonDocument NVARCHAR(MAX) = JSON_QUERY(@json, '$.Document')
			IF (ISJSON(@jsonDocument) > 0)  
				exec sp_api3_UpdateDocuments @jsonDocument,<#= vwProjection.DbObject_Id #>,@userId,@id
			<#}#>

			<#if (vwProjection.DbObject_Name == "Email")
			{#>
			DECLARE @jsonEmailAttachment NVARCHAR(MAX) = JSON_QUERY(@json, '$.EmailAttachment')
			IF (ISJSON(@jsonEmailAttachment) > 0)  
				exec sp_api3_updateEmailAttachments @jsonEmailAttachment,@userId,@id
			<#}#>
			
			<#if (vwProjection.Object_CategoriesEnabled)
			{#>
			DECLARE @jsonCategory NVARCHAR(MAX) = JSON_QUERY(@json, '$.Category')
			IF (ISJSON(@jsonCategory) > 0)  
				exec sp_api3_assignCategories '<#= vwProjection.DbObject_Name #>',@id,@jsonCategory
			<#}#>

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH 
		IF (@@TRANCOUNT > 0)
		   BEGIN
			  ROLLBACK TRANSACTION
		   END 
			
			--SELECT
			--	ERROR_NUMBER() AS ErrorNumber,
			--	ERROR_SEVERITY() AS ErrorSeverity,
			--	ERROR_STATE() AS ErrorState,
			--	ERROR_PROCEDURE() AS ErrorProcedure,
			--	ERROR_LINE() AS ErrorLine,
			--	ERROR_MESSAGE() AS ErrorMessage

				declare @ERROR_NUMBER int = 50000;
				declare @ERROR_MESSAGE nvarchar(2048) = (isnull(cast((ERROR_PROCEDURE()) as varchar) + '. ', '') + ERROR_MESSAGE());
				declare @ERROR_STATE int = ERROR_STATE();

				THROW @ERROR_NUMBER, @ERROR_MESSAGE, @ERROR_STATE;
	END CATCH
